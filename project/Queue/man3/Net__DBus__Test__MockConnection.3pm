.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DBus::Test::MockConnection 3pm"
.TH Net::DBus::Test::MockConnection 3pm "2006-11-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::DBus::Test::MockConnection \- Fake a connection to the bus unit testing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::DBus;
.Ve
.PP
.Vb 1
\&  my $bus = Net::DBus\->test
.Ve
.PP
.Vb 4
\&  # Register a service, and the objec to be tested
\&  use MyObject
\&  my $service = $bus\->export_service("org.example.MyService");
\&  my $object = MyObject\->new($service);
.Ve
.PP
.Vb 3
\&  # Acquire the service & do tests
\&  my $remote_service = $bus\->get_service('org.example.MyService');
\&  my $remote_object = $service\->get_object("/org/example/MyObjct");
.Ve
.PP
.Vb 3
\&  # This traverses the mock connection, eventually
\&  # invoking 'testSomething' on the $object above.
\&  $remote_object\->testSomething()
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object provides a fake implementation of the Net::DBus::Binding::Connection
enabling a pure 'in\-memory' message bus to be mocked up. This is intended to
facilitate creation of unit tests for services which would otherwise need to 
call out to other object on a live message bus. It is used as a companion to
the Net::DBus::Test::MockObject module which is how fake objects are to be
provided on the fake bus.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $con\fR = Net::DBus::Test::MockConnection\->\fInew()" 4
.el .IP "my \f(CW$con\fR = Net::DBus::Test::MockConnection\->\fInew()\fR" 4
.IX Item "my $con = Net::DBus::Test::MockConnection->new()"
Create a new mock connection object instance. It is not usually
neccessary to create instances of this object directly, instead
the \f(CW\*(C`test\*(C'\fR method on the Net::DBus object can be used to
get a handle to a test bus.
.IP "$con\->send($message)" 4
.IX Item "$con->send($message)"
Send a message over the mock connection. If the message is
a method call, it will be dispatched straight to any corresponding
mock object registered. If the mesage is an error or method return
it will be made available as a return value for the \f(CW\*(C`send_with_reply_and_block\*(C'\fR
method. If the message is a signal it will be queued up for processing
by the \f(CW\*(C`dispatch\*(C'\fR method. 
.IP "$bus\->request_name($service_name)" 4
.IX Item "$bus->request_name($service_name)"
Pretend to send a request to the bus registering the well known 
name specified in the \f(CW$service_name\fR parameter. In reality
this is just a no-op giving the impression that the name was
successfully registered.
.ie n .IP "my $reply\fR = \f(CW$con\->send_with_reply_and_block($msg)" 4
.el .IP "my \f(CW$reply\fR = \f(CW$con\fR\->send_with_reply_and_block($msg)" 4
.IX Item "my $reply = $con->send_with_reply_and_block($msg)"
Send a message over the mock connection and wait for a
reply. The \f(CW$msg\fR should be an instance of \f(CW\*(C`Net::DBus::Binding::Message::MethodCall\*(C'\fR
and the return \f(CW$reply\fR will be an instance of \f(CW\*(C`Net::DBus::Binding::Message::MethodReturn\*(C'\fR.
It is also possible that an error will be thrown, with
the thrown error being blessed into the \f(CW\*(C`Net::DBus::Error\*(C'\fR
class.
.IP "$con\->dispatch;" 4
.IX Item "$con->dispatch;"
Dispatches any pending messages in the incoming queue
to their message handlers. This method should be called
by test suites whenever they anticipate that there are
pending signals to be dealt with.
.IP "$con\->add_filter($coderef);" 4
.IX Item "$con->add_filter($coderef);"
Adds a filter to the connection which will be invoked whenever a
message is received. The \f(CW$coderef\fR should be a reference to a
subroutine, which returns a true value if the message should be
filtered out, or a false value if the normal message dispatch
should be performed.
.IP "$bus\->add_match($rule)" 4
.IX Item "$bus->add_match($rule)"
Register a signal match rule with the bus controller, allowing
matching broadcast signals to routed to this client. In reality
this is just a no-op giving the impression that the match was
successfully registered.
.IP "$bus\->remove_match($rule)" 4
.IX Item "$bus->remove_match($rule)"
Unregister a signal match rule with the bus controller, preventing
further broadcast signals being routed to this client. In reality
this is just a no-op giving the impression that the match was
successfully unregistered.
.IP "$con\->register_object_path($path, \e&handler)" 4
.IX Item "$con->register_object_path($path, &handler)"
Registers a handler for messages whose path matches
that specified in the \f(CW$path\fR parameter. The supplied
code reference will be invoked with two parameters, the
connection object on which the message was received,
and the message to be processed (an instance of the
\&\f(CW\*(C`Net::DBus::Binding::Message\*(C'\fR class).
.IP "$con\->register_fallback($path, \e&handler)" 4
.IX Item "$con->register_fallback($path, &handler)"
Registers a handler for messages whose path starts with 
the prefix specified in the \f(CW$path\fR parameter. The supplied
code reference will be invoked with two parameters, the
connection object on which the message was received,
and the message to be processed (an instance of the
\&\f(CW\*(C`Net::DBus::Binding::Message\*(C'\fR class).
.IP "$con\->unregister_object_path($path)" 4
.IX Item "$con->unregister_object_path($path)"
Unregisters the handler associated with the object path \f(CW$path\fR. The
handler would previously have been registered with the \f(CW\*(C`register_object_path\*(C'\fR
or \f(CW\*(C`register_fallback\*(C'\fR methods.
.ie n .IP "my $msg\fR = \f(CW$con\fR\->make_error_message($replyto, \f(CW$name\fR, \f(CW$description)" 4
.el .IP "my \f(CW$msg\fR = \f(CW$con\fR\->make_error_message($replyto, \f(CW$name\fR, \f(CW$description\fR)" 4
.IX Item "my $msg = $con->make_error_message($replyto, $name, $description)"
Creates a new message, representing an error which occurred during
the handling of the method call object passed in as the \f(CW$replyto\fR
parameter. The \f(CW$name\fR parameter is the formal name of the error
condition, while the \f(CW$description\fR is a short piece of text giving
more specific information on the error.
.ie n .IP "my $call\fR = \f(CW$con\fR\->make_method_call_message( \f(CW$service_name\fR, \f(CW$object_path\fR, \f(CW$interface\fR, \f(CW$method_name);" 4
.el .IP "my \f(CW$call\fR = \f(CW$con\fR\->make_method_call_message( \f(CW$service_name\fR, \f(CW$object_path\fR, \f(CW$interface\fR, \f(CW$method_name\fR);" 4
.IX Item "my $call = $con->make_method_call_message( $service_name, $object_path, $interface, $method_name);"
Create a message representing a call on the object located at
the path \f(CW$object_path\fR within the client owning the well-known
name given by \f(CW$service_name\fR. The method to be invoked has
the name \f(CW$method_name\fR within the interface specified by the
\&\f(CW$interface\fR parameter.
.ie n .IP "my $msg\fR = \f(CW$con\->make_method_return_message($replyto)" 4
.el .IP "my \f(CW$msg\fR = \f(CW$con\fR\->make_method_return_message($replyto)" 4
.IX Item "my $msg = $con->make_method_return_message($replyto)"
Create a message representing a reply to the method call message passed in
the \f(CW$replyto\fR parameter.
.ie n .IP "my $msg\fR = \f(CW$con\fR\->make_signal_message($object_path, \f(CW$interface\fR, \f(CW$signal_name);" 4
.el .IP "my \f(CW$msg\fR = \f(CW$con\fR\->make_signal_message($object_path, \f(CW$interface\fR, \f(CW$signal_name\fR);" 4
.IX Item "my $msg = $con->make_signal_message($object_path, $interface, $signal_name);"
Creates a new message, representing a signal [to be] emitted by
the object located under the path given by the \f(CW$object_path\fR
parameter. The name of the signal is given by the \f(CW$signal_name\fR
parameter, and is scoped to the interface given by the
\&\f(CW$interface\fR parameter.
.SH "BUGS"
.IX Header "BUGS"
It doesn't completely replicate the \s-1API\s0 of Net::DBus::Binding::Connection, 
merely enough to make the high level bindings work in a test scenario.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus, Net::DBus::Test::MockObject, Net::DBus::Binding::Connection,
<http://www.mockobjects.com/Faq.html>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 Daniel Berrange <dan@berrange.com>
