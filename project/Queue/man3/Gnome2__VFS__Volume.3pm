.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gnome2::VFS::Volume 3pm"
.TH Gnome2::VFS::Volume 3pm "2006-06-19" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Gnome2::VFS::Volume
.SH "HIERARCHY"
.IX Header "HIERARCHY"
.Vb 2
\&  Glib::Object
\&  +\-\-\-\-Gnome2::VFS::Volume
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "string = $volume\fP\->\fBget_activation_uri"
.el .Sh "string = \f(CW$volume\fP\->\fBget_activation_uri\fP"
.IX Subsection "string = $volume->get_activation_uri"
.ie n .Sh "integer = $a\fP\->\fBcompare ($b)"
.el .Sh "integer = \f(CW$a\fP\->\fBcompare\fP ($b)"
.IX Subsection "integer = $a->compare ($b)"
.RS 4
.ie n .IP "* $b (Gnome2::VFS::Volume)" 4
.el .IP "* \f(CW$b\fR (Gnome2::VFS::Volume)" 4
.IX Item "$b (Gnome2::VFS::Volume)"
.RE
.RS 4
.RE
.ie n .Sh "string = $volume\fP\->\fBget_device_path"
.el .Sh "string = \f(CW$volume\fP\->\fBget_device_path\fP"
.IX Subsection "string = $volume->get_device_path"
.ie n .Sh "devicetype = $volume\fP\->\fBget_device_type"
.el .Sh "devicetype = \f(CW$volume\fP\->\fBget_device_type\fP"
.IX Subsection "devicetype = $volume->get_device_type"
.ie n .Sh "string = $volume\fP\->\fBget_display_name"
.el .Sh "string = \f(CW$volume\fP\->\fBget_display_name\fP"
.IX Subsection "string = $volume->get_display_name"
.ie n .Sh "drive = $volume\fP\->\fBget_drive"
.el .Sh "drive = \f(CW$volume\fP\->\fBget_drive\fP"
.IX Subsection "drive = $volume->get_drive"
.ie n .Sh "$volume\->\fBeject\fP ($func, $data=undef)"
.el .Sh "$volume\->\fBeject\fP ($func, \f(CW$data\fP=undef)"
.IX Subsection "$volume->eject ($func, $data=undef)"
.RS 4
.PD 0
.ie n .IP "* $func (scalar)" 4
.el .IP "* \f(CW$func\fR (scalar)" 4
.IX Item "$func (scalar)"
.ie n .IP "* $data (scalar)" 4
.el .IP "* \f(CW$data\fR (scalar)" 4
.IX Item "$data (scalar)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "string = $volume\fP\->\fBget_filesystem_type"
.el .Sh "string = \f(CW$volume\fP\->\fBget_filesystem_type\fP"
.IX Subsection "string = $volume->get_filesystem_type"
.ie n .Sh "string = $volume\fP\->\fBget_hal_udi"
.el .Sh "string = \f(CW$volume\fP\->\fBget_hal_udi\fP"
.IX Subsection "string = $volume->get_hal_udi"
.ie n .Sh "boolean = $volume\fP\->\fBhandles_trash"
.el .Sh "boolean = \f(CW$volume\fP\->\fBhandles_trash\fP"
.IX Subsection "boolean = $volume->handles_trash"
.ie n .Sh "string = $volume\fP\->\fBget_icon"
.el .Sh "string = \f(CW$volume\fP\->\fBget_icon\fP"
.IX Subsection "string = $volume->get_icon"
.ie n .Sh "unsigned = $volume\fP\->\fBget_id"
.el .Sh "unsigned = \f(CW$volume\fP\->\fBget_id\fP"
.IX Subsection "unsigned = $volume->get_id"
.ie n .Sh "boolean = $volume\fP\->\fBis_mounted"
.el .Sh "boolean = \f(CW$volume\fP\->\fBis_mounted\fP"
.IX Subsection "boolean = $volume->is_mounted"
.ie n .Sh "boolean = $volume\fP\->\fBis_read_only"
.el .Sh "boolean = \f(CW$volume\fP\->\fBis_read_only\fP"
.IX Subsection "boolean = $volume->is_read_only"
.ie n .Sh "boolean = $volume\fP\->\fBis_user_visible"
.el .Sh "boolean = \f(CW$volume\fP\->\fBis_user_visible\fP"
.IX Subsection "boolean = $volume->is_user_visible"
.ie n .Sh "$volume\->\fBunmount\fP ($func, $data=undef)"
.el .Sh "$volume\->\fBunmount\fP ($func, \f(CW$data\fP=undef)"
.IX Subsection "$volume->unmount ($func, $data=undef)"
.RS 4
.ie n .IP "* $func (scalar)" 4
.el .IP "* \f(CW$func\fR (scalar)" 4
.IX Item "$func (scalar)"
.PD 0
.ie n .IP "* $data (scalar)" 4
.el .IP "* \f(CW$data\fR (scalar)" 4
.IX Item "$data (scalar)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "volumetype = $volume\fP\->\fBget_volume_type"
.el .Sh "volumetype = \f(CW$volume\fP\->\fBget_volume_type\fP"
.IX Subsection "volumetype = $volume->get_volume_type"
.SH "ENUMS AND FLAGS"
.IX Header "ENUMS AND FLAGS"
.Sh "enum Gnome2::VFS::DeviceType"
.IX Subsection "enum Gnome2::VFS::DeviceType"
.IP "* 'unknown' / '\s-1GNOME_VFS_DEVICE_TYPE_UNKNOWN\s0'" 4
.IX Item "'unknown' / 'GNOME_VFS_DEVICE_TYPE_UNKNOWN'"
.PD 0
.IP "* 'audio\-cd' / '\s-1GNOME_VFS_DEVICE_TYPE_AUDIO_CD\s0'" 4
.IX Item "'audio-cd' / 'GNOME_VFS_DEVICE_TYPE_AUDIO_CD'"
.IP "* 'video\-dvd' / '\s-1GNOME_VFS_DEVICE_TYPE_VIDEO_DVD\s0'" 4
.IX Item "'video-dvd' / 'GNOME_VFS_DEVICE_TYPE_VIDEO_DVD'"
.IP "* 'harddrive' / '\s-1GNOME_VFS_DEVICE_TYPE_HARDDRIVE\s0'" 4
.IX Item "'harddrive' / 'GNOME_VFS_DEVICE_TYPE_HARDDRIVE'"
.IP "* 'cdrom' / '\s-1GNOME_VFS_DEVICE_TYPE_CDROM\s0'" 4
.IX Item "'cdrom' / 'GNOME_VFS_DEVICE_TYPE_CDROM'"
.IP "* 'floppy' / '\s-1GNOME_VFS_DEVICE_TYPE_FLOPPY\s0'" 4
.IX Item "'floppy' / 'GNOME_VFS_DEVICE_TYPE_FLOPPY'"
.IP "* 'zip' / '\s-1GNOME_VFS_DEVICE_TYPE_ZIP\s0'" 4
.IX Item "'zip' / 'GNOME_VFS_DEVICE_TYPE_ZIP'"
.IP "* 'jaz' / '\s-1GNOME_VFS_DEVICE_TYPE_JAZ\s0'" 4
.IX Item "'jaz' / 'GNOME_VFS_DEVICE_TYPE_JAZ'"
.IP "* 'nfs' / '\s-1GNOME_VFS_DEVICE_TYPE_NFS\s0'" 4
.IX Item "'nfs' / 'GNOME_VFS_DEVICE_TYPE_NFS'"
.IP "* 'autofs' / '\s-1GNOME_VFS_DEVICE_TYPE_AUTOFS\s0'" 4
.IX Item "'autofs' / 'GNOME_VFS_DEVICE_TYPE_AUTOFS'"
.IP "* 'camera' / '\s-1GNOME_VFS_DEVICE_TYPE_CAMERA\s0'" 4
.IX Item "'camera' / 'GNOME_VFS_DEVICE_TYPE_CAMERA'"
.IP "* 'memory\-stick' / '\s-1GNOME_VFS_DEVICE_TYPE_MEMORY_STICK\s0'" 4
.IX Item "'memory-stick' / 'GNOME_VFS_DEVICE_TYPE_MEMORY_STICK'"
.IP "* 'smb' / '\s-1GNOME_VFS_DEVICE_TYPE_SMB\s0'" 4
.IX Item "'smb' / 'GNOME_VFS_DEVICE_TYPE_SMB'"
.IP "* 'apple' / '\s-1GNOME_VFS_DEVICE_TYPE_APPLE\s0'" 4
.IX Item "'apple' / 'GNOME_VFS_DEVICE_TYPE_APPLE'"
.IP "* 'music\-player' / '\s-1GNOME_VFS_DEVICE_TYPE_MUSIC_PLAYER\s0'" 4
.IX Item "'music-player' / 'GNOME_VFS_DEVICE_TYPE_MUSIC_PLAYER'"
.IP "* 'windows' / '\s-1GNOME_VFS_DEVICE_TYPE_WINDOWS\s0'" 4
.IX Item "'windows' / 'GNOME_VFS_DEVICE_TYPE_WINDOWS'"
.IP "* 'loopback' / '\s-1GNOME_VFS_DEVICE_TYPE_LOOPBACK\s0'" 4
.IX Item "'loopback' / 'GNOME_VFS_DEVICE_TYPE_LOOPBACK'"
.IP "* 'network' / '\s-1GNOME_VFS_DEVICE_TYPE_NETWORK\s0'" 4
.IX Item "'network' / 'GNOME_VFS_DEVICE_TYPE_NETWORK'"
.PD
.Sh "enum Gnome2::VFS::VolumeType"
.IX Subsection "enum Gnome2::VFS::VolumeType"
.IP "* 'mountpoint' / '\s-1GNOME_VFS_VOLUME_TYPE_MOUNTPOINT\s0'" 4
.IX Item "'mountpoint' / 'GNOME_VFS_VOLUME_TYPE_MOUNTPOINT'"
.PD 0
.IP "* 'vfs\-mount' / '\s-1GNOME_VFS_VOLUME_TYPE_VFS_MOUNT\s0'" 4
.IX Item "'vfs-mount' / 'GNOME_VFS_VOLUME_TYPE_VFS_MOUNT'"
.IP "* 'connected\-server' / '\s-1GNOME_VFS_VOLUME_TYPE_CONNECTED_SERVER\s0'" 4
.IX Item "'connected-server' / 'GNOME_VFS_VOLUME_TYPE_CONNECTED_SERVER'"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Gnome2::VFS, Glib::Object
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2004 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL\s0.  See Gnome2::VFS for a full notice.
