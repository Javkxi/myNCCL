.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Glib::MainLoop 3pm"
.TH Glib::MainLoop 3pm "2007-03-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Glib::MainLoop \-  An event source manager
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Event-driven programs need some sort of loop which watches for events and
launches the appropriate actions.  Glib::MainLoop provides this functionality.
.PP
Mainloops have context, provided by the MainContext object.  For the most part
you can use the default context (see \f(CW\*(C`default\*(C'\fR), but if you want to create a
subcontext for a nested loop which doesn't have the same event sources, etc,
you can.
.PP
Event sources, attached to main contexts, watch for events to happen, and
launch appropriate actions.  Glib provides a few ready-made event sources,
the Glib::Timeout, Glib::Idle, and io watch (\f(CW\*(C`Glib::IO\->add_watch\*(C'\fR).
.PP
Under the hood, Gtk+ adds event sources for GdkEvents to dispatch events to
your widgets.  In fact, Gtk2 provides an abstraction of Glib::MainLoop (See
\&\f(CW\*(C`Gtk2\->main\*(C'\fR and friends), so you may rarely have cause to use
Glib::MainLoop directly.
.PP
Note: As of version 1.080, the Glib module uses a custom event source to
ensure that perl's safe signal handling and the glib polling event loop
play nicely together.  It is no longer necessary to install a timeout to
ensure that async signals get handled in a timely manner.
.SH "METHODS"
.IX Header "METHODS"
.Sh "maincontext thingamabob = Glib::MainContext\->\fBnew\fP"
.IX Subsection "maincontext thingamabob = Glib::MainContext->new"
.ie n .Sh "mainloop = Glib::MainLoop\->\fBnew\fP ($context=undef, $is_running=FALSE)"
.el .Sh "mainloop = Glib::MainLoop\->\fBnew\fP ($context=undef, \f(CW$is_running\fP=FALSE)"
.IX Subsection "mainloop = Glib::MainLoop->new ($context=undef, $is_running=FALSE)"
.RS 4
.ie n .IP "* $context (Glib::MainContext thingamabob)" 4
.el .IP "* \f(CW$context\fR (Glib::MainContext thingamabob)" 4
.IX Item "$context (Glib::MainContext thingamabob)"
.PD 0
.ie n .IP "* $is_running (boolean)" 4
.el .IP "* \f(CW$is_running\fR (boolean)" 4
.IX Item "$is_running (boolean)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "integer = Glib::Timeout\->\fBadd\fP ($interval, $callback\fP, \f(CW$data\fP=undef, \f(CW$priority=G_PRIORITY_DEFAULT)"
.el .Sh "integer = Glib::Timeout\->\fBadd\fP ($interval, \f(CW$callback\fP, \f(CW$data\fP=undef, \f(CW$priority\fP=G_PRIORITY_DEFAULT)"
.IX Subsection "integer = Glib::Timeout->add ($interval, $callback, $data=undef, $priority=G_PRIORITY_DEFAULT)"
.RS 4
.ie n .IP "* $interval (integer) number of milliseconds" 4
.el .IP "* \f(CW$interval\fR (integer) number of milliseconds" 4
.IX Item "$interval (integer) number of milliseconds"
.PD 0
.ie n .IP "* $callback (subroutine)" 4
.el .IP "* \f(CW$callback\fR (subroutine)" 4
.IX Item "$callback (subroutine)"
.ie n .IP "* $data (scalar)" 4
.el .IP "* \f(CW$data\fR (scalar)" 4
.IX Item "$data (scalar)"
.ie n .IP "* $priority (integer)" 4
.el .IP "* \f(CW$priority\fR (integer)" 4
.IX Item "$priority (integer)"
.RE
.RS 4
.PD
.Sp
Run \fI$callback\fR every \fI$interval\fR milliseconds until \fI$callback\fR returns
false.  Returns a source id which may be used with \f(CW\*(C`Glib::Source\->remove\*(C'\fR.
Note that a mainloop must be active for the timeout to execute.
.RE
.ie n .Sh "integer = Glib::Idle\->\fBadd\fP ($callback, $data\fP=undef, \f(CW$priority=G_PRIORITY_DEFAULT_IDLE)"
.el .Sh "integer = Glib::Idle\->\fBadd\fP ($callback, \f(CW$data\fP=undef, \f(CW$priority\fP=G_PRIORITY_DEFAULT_IDLE)"
.IX Subsection "integer = Glib::Idle->add ($callback, $data=undef, $priority=G_PRIORITY_DEFAULT_IDLE)"
.RS 4
.ie n .IP "* $callback (subroutine)" 4
.el .IP "* \f(CW$callback\fR (subroutine)" 4
.IX Item "$callback (subroutine)"
.PD 0
.ie n .IP "* $data (scalar)" 4
.el .IP "* \f(CW$data\fR (scalar)" 4
.IX Item "$data (scalar)"
.ie n .IP "* $priority (integer)" 4
.el .IP "* \f(CW$priority\fR (integer)" 4
.IX Item "$priority (integer)"
.RE
.RS 4
.PD
.Sp
Run \fI$callback\fR when the mainloop is idle.  If \fI$callback\fR returns false,
it will uninstall itself, otherwise, it will run again at the next idle
iteration.  Returns a source id which may be used with
\&\f(CW\*(C`Glib::Source\->remove\*(C'\fR.
.RE
.ie n .Sh "integer = Glib::IO\->\fBadd_watch\fP ($fd, $condition\fP, \f(CW$callback\fP, \f(CW$data\fP=undef, \f(CW$priority=G_PRIORITY_DEFAULT)"
.el .Sh "integer = Glib::IO\->\fBadd_watch\fP ($fd, \f(CW$condition\fP, \f(CW$callback\fP, \f(CW$data\fP=undef, \f(CW$priority\fP=G_PRIORITY_DEFAULT)"
.IX Subsection "integer = Glib::IO->add_watch ($fd, $condition, $callback, $data=undef, $priority=G_PRIORITY_DEFAULT)"
.RS 4
.ie n .IP "* $fd (Glib::IO) file number, e.g. fileno($filehandle)" 4
.el .IP "* \f(CW$fd\fR (Glib::IO) file number, e.g. fileno($filehandle)" 4
.IX Item "$fd (Glib::IO) file number, e.g. fileno($filehandle)"
.PD 0
.ie n .IP "* $condition (Glib::IOCondition)" 4
.el .IP "* \f(CW$condition\fR (Glib::IOCondition)" 4
.IX Item "$condition (Glib::IOCondition)"
.ie n .IP "* $callback (subroutine)" 4
.el .IP "* \f(CW$callback\fR (subroutine)" 4
.IX Item "$callback (subroutine)"
.ie n .IP "* $data (scalar)" 4
.el .IP "* \f(CW$data\fR (scalar)" 4
.IX Item "$data (scalar)"
.ie n .IP "* $priority (integer)" 4
.el .IP "* \f(CW$priority\fR (integer)" 4
.IX Item "$priority (integer)"
.RE
.RS 4
.PD
.Sp
Run \fI$callback\fR when there is an event on \fI$fd\fR that matches \fI$condition\fR.
The watch uninstalls itself if \fI$callback\fR returns false.
Returns a source id that may be used with \f(CW\*(C`Glib::Source\->remove\*(C'\fR.
.Sp
Glib's \s-1IO\s0 channels serve the same basic purpose as Perl's file handles, so
for the most part you don't see GIOChannels in Perl.  The \s-1IO\s0 watch integrates
\&\s-1IO\s0 operations with the main loop, which Perl file handles don't do.  For
various reasons, this function requires raw file descriptors, not full
file handles.  See \f(CW\*(C`fileno\*(C'\fR in perlfunc.
.RE
.ie n .Sh "maincontext thingamabob = $loop\fP\->\fBget_context"
.el .Sh "maincontext thingamabob = \f(CW$loop\fP\->\fBget_context\fP"
.IX Subsection "maincontext thingamabob = $loop->get_context"
.Sh "maincontext thingamabob = Glib::MainContext\->\fBdefault\fP"
.IX Subsection "maincontext thingamabob = Glib::MainContext->default"
.ie n .Sh "boolean = $loop\fP\->\fBis_running"
.el .Sh "boolean = \f(CW$loop\fP\->\fBis_running\fP"
.IX Subsection "boolean = $loop->is_running"
.ie n .Sh "boolean = $context\fP\->\fBiteration ($may_block)"
.el .Sh "boolean = \f(CW$context\fP\->\fBiteration\fP ($may_block)"
.IX Subsection "boolean = $context->iteration ($may_block)"
.RS 4
.ie n .IP "* $may_block (boolean)" 4
.el .IP "* \f(CW$may_block\fR (boolean)" 4
.IX Item "$may_block (boolean)"
.RE
.RS 4
.RE
.Sh "integer = Glib::main_depth"
.IX Subsection "integer = Glib::main_depth"
.RS 4
Find the current main loop recursion level.  This is handy in fringe
situations, but those are very rare; see the C \s-1API\s0 reference for a more
in-depth discussion.
.RE
.ie n .Sh "boolean = $context\fP\->\fBpending"
.el .Sh "boolean = \f(CW$context\fP\->\fBpending\fP"
.IX Subsection "boolean = $context->pending"
.Sh "$loop\->\fBquit\fP"
.IX Subsection "$loop->quit"
.Sh "boolean = Glib::Source\->\fBremove\fP ($tag)"
.IX Subsection "boolean = Glib::Source->remove ($tag)"
.RS 4
.ie n .IP "* $tag (integer)" 4
.el .IP "* \f(CW$tag\fR (integer)" 4
.IX Item "$tag (integer)"
.RE
.RS 4
.Sp
Remove an event source.  \fI$tag\fR is the number returned by things like
\&\f(CW\*(C`Glib::Timeout\->add\*(C'\fR, \f(CW\*(C`Glib::Idle\->add\*(C'\fR, and
\&\f(CW\*(C`Glib::IO\->add_watch\*(C'\fR.
.RE
.Sh "$loop\->\fBrun\fP"
.IX Subsection "$loop->run"
.SH "ENUMS AND FLAGS"
.IX Header "ENUMS AND FLAGS"
.Sh "flags Glib::IOCondition"
.IX Subsection "flags Glib::IOCondition"
.IP "* 'in' / 'G_IO_IN'" 4
.IX Item "'in' / 'G_IO_IN'"
.PD 0
.IP "* 'out' / 'G_IO_OUT'" 4
.IX Item "'out' / 'G_IO_OUT'"
.IP "* 'pri' / 'G_IO_PRI'" 4
.IX Item "'pri' / 'G_IO_PRI'"
.IP "* 'err' / 'G_IO_ERR'" 4
.IX Item "'err' / 'G_IO_ERR'"
.IP "* 'hup' / 'G_IO_HUP'" 4
.IX Item "'hup' / 'G_IO_HUP'"
.IP "* 'nval' / 'G_IO_NVAL'" 4
.IX Item "'nval' / 'G_IO_NVAL'"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2006 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL\s0.  See Glib for a full notice.
