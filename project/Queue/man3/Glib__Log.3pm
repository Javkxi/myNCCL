.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Glib::Log 3pm"
.TH Glib::Log 3pm "2007-03-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Glib::Log \-  A flexible logging mechanism
.SH "METHODS"
.IX Header "METHODS"
.Sh "scalar = Glib::Log\->\fBset_always_fatal\fP ($fatal_mask)"
.IX Subsection "scalar = Glib::Log->set_always_fatal ($fatal_mask)"
.RS 4
.ie n .IP "* $fatal_mask (scalar)" 4
.el .IP "* \f(CW$fatal_mask\fR (scalar)" 4
.IX Item "$fatal_mask (scalar)"
.RE
.RS 4
.RE
.ie n .Sh "Glib\->\fBcritical\fP ($domain, $message)"
.el .Sh "Glib\->\fBcritical\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->critical ($domain, $message)"
.RS 4
.PD 0
.ie n .IP "* $domain (string or undef)" 4
.el .IP "* \f(CW$domain\fR (string or undef)" 4
.IX Item "$domain (string or undef)"
.ie n .IP "* $message (string)" 4
.el .IP "* \f(CW$message\fR (string)" 4
.IX Item "$message (string)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "Glib\->\fBerror\fP ($domain, $message)"
.el .Sh "Glib\->\fBerror\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->error ($domain, $message)"
.RS 4
.ie n .IP "* $domain (string or undef)" 4
.el .IP "* \f(CW$domain\fR (string or undef)" 4
.IX Item "$domain (string or undef)"
.PD 0
.ie n .IP "* $message (string)" 4
.el .IP "* \f(CW$message\fR (string)" 4
.IX Item "$message (string)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "scalar = Glib::Log\->\fBset_fatal_mask\fP ($log_domain, $fatal_mask)"
.el .Sh "scalar = Glib::Log\->\fBset_fatal_mask\fP ($log_domain, \f(CW$fatal_mask\fP)"
.IX Subsection "scalar = Glib::Log->set_fatal_mask ($log_domain, $fatal_mask)"
.RS 4
.ie n .IP "* $log_domain (string)" 4
.el .IP "* \f(CW$log_domain\fR (string)" 4
.IX Item "$log_domain (string)"
.PD 0
.ie n .IP "* $fatal_mask (scalar)" 4
.el .IP "* \f(CW$fatal_mask\fR (scalar)" 4
.IX Item "$fatal_mask (scalar)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "integer = Glib::Log\->\fBset_handler\fP ($log_domain, $log_levels\fP, \f(CW$log_func\fP, \f(CW$user_data=undef)"
.el .Sh "integer = Glib::Log\->\fBset_handler\fP ($log_domain, \f(CW$log_levels\fP, \f(CW$log_func\fP, \f(CW$user_data\fP=undef)"
.IX Subsection "integer = Glib::Log->set_handler ($log_domain, $log_levels, $log_func, $user_data=undef)"
.RS 4
.ie n .IP "* $log_domain (string or undef) name of the domain to handle with this callback." 4
.el .IP "* \f(CW$log_domain\fR (string or undef) name of the domain to handle with this callback." 4
.IX Item "$log_domain (string or undef) name of the domain to handle with this callback."
.PD 0
.ie n .IP "* $log_levels (Glib::LogLevelFlags) log levels to handle with this callback" 4
.el .IP "* \f(CW$log_levels\fR (Glib::LogLevelFlags) log levels to handle with this callback" 4
.IX Item "$log_levels (Glib::LogLevelFlags) log levels to handle with this callback"
.ie n .IP "* $log_func (subroutine) handler function" 4
.el .IP "* \f(CW$log_func\fR (subroutine) handler function" 4
.IX Item "$log_func (subroutine) handler function"
.ie n .IP "* $user_data (scalar)" 4
.el .IP "* \f(CW$user_data\fR (scalar)" 4
.IX Item "$user_data (scalar)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "Glib\->\fBlog\fP ($log_domain, $log_level\fP, \f(CW$message)"
.el .Sh "Glib\->\fBlog\fP ($log_domain, \f(CW$log_level\fP, \f(CW$message\fP)"
.IX Subsection "Glib->log ($log_domain, $log_level, $message)"
.RS 4
.ie n .IP "* $log_domain (string or undef)" 4
.el .IP "* \f(CW$log_domain\fR (string or undef)" 4
.IX Item "$log_domain (string or undef)"
.PD 0
.ie n .IP "* $log_level (scalar)" 4
.el .IP "* \f(CW$log_level\fR (scalar)" 4
.IX Item "$log_level (scalar)"
.ie n .IP "* $message (string)" 4
.el .IP "* \f(CW$message\fR (string)" 4
.IX Item "$message (string)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "Glib\->\fBmessage\fP ($domain, $message)"
.el .Sh "Glib\->\fBmessage\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->message ($domain, $message)"
.RS 4
.ie n .IP "* $domain (string or undef)" 4
.el .IP "* \f(CW$domain\fR (string or undef)" 4
.IX Item "$domain (string or undef)"
.PD 0
.ie n .IP "* $message (string)" 4
.el .IP "* \f(CW$message\fR (string)" 4
.IX Item "$message (string)"
.RE
.RS 4
.RE
.PD
.ie n .Sh "Glib::Log\->\fBremove_handler\fP ($log_domain, $handler_id)"
.el .Sh "Glib::Log\->\fBremove_handler\fP ($log_domain, \f(CW$handler_id\fP)"
.IX Subsection "Glib::Log->remove_handler ($log_domain, $handler_id)"
.RS 4
.ie n .IP "* $log_domain (string or undef)" 4
.el .IP "* \f(CW$log_domain\fR (string or undef)" 4
.IX Item "$log_domain (string or undef)"
.PD 0
.ie n .IP "* $handler_id\fR (integer) as returned by \f(CW""set_handler""" 4
.el .IP "* \f(CW$handler_id\fR (integer) as returned by \f(CWset_handler\fR" 4
.IX Item "$handler_id (integer) as returned by set_handler"
.RE
.RS 4
.RE
.PD
.ie n .Sh "Glib\->\fBwarning\fP ($domain, $message)"
.el .Sh "Glib\->\fBwarning\fP ($domain, \f(CW$message\fP)"
.IX Subsection "Glib->warning ($domain, $message)"
.RS 4
.ie n .IP "* $domain (string or undef)" 4
.el .IP "* \f(CW$domain\fR (string or undef)" 4
.IX Item "$domain (string or undef)"
.PD 0
.ie n .IP "* $message (string)" 4
.el .IP "* \f(CW$message\fR (string)" 4
.IX Item "$message (string)"
.RE
.RS 4
.RE
.PD
.SH "ENUMS AND FLAGS"
.IX Header "ENUMS AND FLAGS"
.Sh "flags Glib::LogLevelFlags"
.IX Subsection "flags Glib::LogLevelFlags"
.IP "* 'recursion' / 'G_LOG_FLAG_RECURSION'" 4
.IX Item "'recursion' / 'G_LOG_FLAG_RECURSION'"
.PD 0
.IP "* 'fatal' / 'G_LOG_FLAG_FATAL'" 4
.IX Item "'fatal' / 'G_LOG_FLAG_FATAL'"
.IP "* 'error' / 'G_LOG_LEVEL_ERROR'" 4
.IX Item "'error' / 'G_LOG_LEVEL_ERROR'"
.IP "* 'critical' / 'G_LOG_LEVEL_CRITICAL'" 4
.IX Item "'critical' / 'G_LOG_LEVEL_CRITICAL'"
.IP "* 'warning' / 'G_LOG_LEVEL_WARNING'" 4
.IX Item "'warning' / 'G_LOG_LEVEL_WARNING'"
.IP "* 'message' / 'G_LOG_LEVEL_MESSAGE'" 4
.IX Item "'message' / 'G_LOG_LEVEL_MESSAGE'"
.IP "* 'info' / 'G_LOG_LEVEL_INFO'" 4
.IX Item "'info' / 'G_LOG_LEVEL_INFO'"
.IP "* 'debug' / 'G_LOG_LEVEL_DEBUG'" 4
.IX Item "'debug' / 'G_LOG_LEVEL_DEBUG'"
.IP "* 'fatal\-mask' / 'G_LOG_FATAL_MASK'" 4
.IX Item "'fatal-mask' / 'G_LOG_FATAL_MASK'"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2006 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL\s0.  See Glib for a full notice.
