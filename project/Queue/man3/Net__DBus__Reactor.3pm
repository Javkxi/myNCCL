.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DBus::Reactor 3pm"
.TH Net::DBus::Reactor 3pm "2006-11-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::DBus::Reactor \- application event loop 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Create and run an event loop:
.PP
.Vb 2
\&   use Net::DBus::Reactor;
\&   my $reactor = Net::DBus::Reactor\->new();
.Ve
.PP
.Vb 1
\&   $reactor\->run();
.Ve
.PP
Manage some file handlers
.PP
.Vb 5
\&   $reactor\->add_read($fd, 
\&                      Net::DBus::Callback\->new(method => sub {
\&                         my $fd = shift;
\&                         ...read some data...
\&                      }, args => [$fd]);
.Ve
.PP
.Vb 5
\&   $reactor\->add_write($fd, 
\&                      Net::DBus::Callback\->new(method => sub {
\&                         my $fd = shift;
\&                         ...write some data...
\&                      }, args => [$fd]);
.Ve
.PP
Temporarily (dis|en)able a handle
.PP
.Vb 4
\&   # Disable
\&   $reactor\->toggle_read($fd, 0);
\&   # Enable
\&   $reactor\->toggle_read($fd, 1);
.Ve
.PP
Permanently remove a handle
.PP
.Vb 1
\&   $reactor\->remove_read($fd);
.Ve
.PP
Manage a regular timeout every 100 milliseconds
.PP
.Vb 5
\&   my $timer = $reactor\->add_timeout(100,
\&                                     Net::DBus::Callback\->new(
\&              method => sub {
\&                 ...process the alarm...
\&              }));
.Ve
.PP
Temporarily (dis|en)able a timer
.PP
.Vb 4
\&   # Disable
\&   $reactor\->toggle_timeout($timer, 0);
\&   # Enable
\&   $reactor\->toggle_timeout($timer, 1);
.Ve
.PP
Permanently remove a timer
.PP
.Vb 1
\&   $reactor\->remove_timeout($timer);
.Ve
.PP
Add a post-dispatch hook
.PP
.Vb 4
\&   my $hook = $reactor\->add_hook(Net::DBus::Callback\->new(
\&         method => sub {
\&            ... do some work...
\&         }));
.Ve
.PP
Remove a hook
.PP
.Vb 1
\&   $reactor\->remove_hook($hook);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a general purpose event loop for
the purposes of multiplexing I/O events and timeouts
in a single process. The underlying implementation is
done using the select system call. File handles can
be registered for monitoring on read, write and exception
(out\-of\-band data) events. Timers can be registered
to expire with a periodic frequency. These are implemented
using the timeout parameter of the select system call.
Since this parameter merely represents an upper bound
on the amount of time the select system call is allowed
to sleep, the actual period of the timers may vary. Under
normal load this variance is typically 10 milliseconds.
Finally, hooks may be registered which will be invoked on
each iteration of the event loop (ie after processing
the file events, or timeouts indicated by the select
system call returning).
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $reactor\fR = Net::DBus::Reactor\->\fInew();" 4
.el .IP "my \f(CW$reactor\fR = Net::DBus::Reactor\->\fInew()\fR;" 4
.IX Item "my $reactor = Net::DBus::Reactor->new();"
Creates a new event loop ready for monitoring file handles, or 
generating timeouts. Except in very unsual circumstances (examples
of which I can't think up) it is not neccessary or desriable to
explicitly create new reactor instances. Instead call the main
method to get a handle to the singleton instance.
.IP "$reactor\->main" 4
.IX Item "$reactor->main"
Return a handle to the singleton instance of the reactor. This
is the recommended way of getting hold of a reactor, since it
removes the need for modules to pass around handles to their
privately created reactors.
.IP "$reactor\->manage($connection);" 4
.IX Item "$reactor->manage($connection);"
.PD 0
.IP "$reactor\->manage($server);" 4
.IX Item "$reactor->manage($server);"
.PD
Registers a \f(CW\*(C`Net::DBus::Connection\*(C'\fR or \f(CW\*(C`Net::DBus::Server\*(C'\fR object
for management by the event loop. This basically involves
hooking up the watch & timeout callbacks to the event loop.
For connections it will also register a hook to invoke the
\&\f(CW\*(C`dispatch\*(C'\fR method periodically.
.IP "$reactor\->\fIrun()\fR;" 4
.IX Item "$reactor->run();"
Starts the event loop monitoring any registered
file handles and timeouts. At least one file
handle, or timer must have been registered prior
to running the reactor, otherwise it will immediately
exit. The reactor will run until all registered
file handles, or timeouts have been removed, or
disabled. The reactor can be explicitly stopped by
calling the \f(CW\*(C`shutdown\*(C'\fR method.
.IP "$reactor\->\fIshutdown()\fR;" 4
.IX Item "$reactor->shutdown();"
Explicitly shutdown the reactor after pending
events have been processed.
.IP "$reactor\->\fIstep()\fR;" 4
.IX Item "$reactor->step();"
Perform one iteration of the event loop, going to
sleep until an event occurs on a registered file
handle, or a timeout occurrs. This method is generally
not required in day-to-day use.
.ie n .IP "$reactor\->add_read($fd, $callback\fR[, \f(CW$status]);" 4
.el .IP "$reactor\->add_read($fd, \f(CW$callback\fR[, \f(CW$status\fR]);" 4
.IX Item "$reactor->add_read($fd, $callback[, $status]);"
Registers a file handle for monitoring of read
events. The \f(CW$callback\fR parameter specifies an
instance of the \f(CW\*(C`Net::DBus::Callback\*(C'\fR object to invoke
each time an event occurs. The optional \f(CW$status\fR
parameter is a boolean value to specify whether the
watch is initially enabled.
.ie n .IP "$reactor\->add_write($fd, $callback\fR[, \f(CW$status]);" 4
.el .IP "$reactor\->add_write($fd, \f(CW$callback\fR[, \f(CW$status\fR]);" 4
.IX Item "$reactor->add_write($fd, $callback[, $status]);"
Registers a file handle for monitoring of write
events. The \f(CW$callback\fR parameter specifies an
instance of the \f(CW\*(C`Net::DBus::Callback\*(C'\fR object to invoke
each time an event occurs. The optional \f(CW$status\fR
parameter is a boolean value to specify whether the
watch is initially enabled.
.ie n .IP "$reactor\->add_exception($fd, $callback\fR[, \f(CW$status]);" 4
.el .IP "$reactor\->add_exception($fd, \f(CW$callback\fR[, \f(CW$status\fR]);" 4
.IX Item "$reactor->add_exception($fd, $callback[, $status]);"
Registers a file handle for monitoring of exception
events. The \f(CW$callback\fR parameter specifies an
instance of the \f(CW\*(C`Net::DBus::Callback\*(C'\fR object to invoke
each time an event occurs. The optional \f(CW$status\fR
parameter is a boolean value to specify whether the
watch is initially enabled.
.ie n .IP "my $id\fR = \f(CW$reactor\fR\->add_timeout($interval, \f(CW$callback\fR, \f(CW$status);" 4
.el .IP "my \f(CW$id\fR = \f(CW$reactor\fR\->add_timeout($interval, \f(CW$callback\fR, \f(CW$status\fR);" 4
.IX Item "my $id = $reactor->add_timeout($interval, $callback, $status);"
Registers a new timeout to expire every \f(CW$interval\fR
milliseconds. The \f(CW$callback\fR parameter specifies an
instance of the \f(CW\*(C`Net::DBus::Callback\*(C'\fR object to invoke
each time the timeout expires. The optional \f(CW$status\fR
parameter is a boolean value to specify whether the
timeout is initially enabled. The return parameter is
a unique identifier which can be used to later remove
or disable the timeout.
.IP "$reactor\->remove_timeout($id);" 4
.IX Item "$reactor->remove_timeout($id);"
Removes a previously registered timeout specified by
the \f(CW$id\fR parameter.
.ie n .IP "$reactor\->toggle_timeout($id, $status\fR[, \f(CW$interval]);" 4
.el .IP "$reactor\->toggle_timeout($id, \f(CW$status\fR[, \f(CW$interval\fR]);" 4
.IX Item "$reactor->toggle_timeout($id, $status[, $interval]);"
Updates the state of a previously registered timeout
specifed by the \f(CW$id\fR parameter. The \f(CW$status\fR
parameter specifies whether the timeout is to be enabled
or disabled, while the optional \f(CW$interval\fR parameter
can be used to change the period of the timeout.
.ie n .IP "my $id\fR = \f(CW$reactor\fR\->add_hook($callback[, \f(CW$status]);" 4
.el .IP "my \f(CW$id\fR = \f(CW$reactor\fR\->add_hook($callback[, \f(CW$status\fR]);" 4
.IX Item "my $id = $reactor->add_hook($callback[, $status]);"
Registers a new hook to be fired on each iteration
of the event loop. The \f(CW$callback\fR parameter
specifies an instance of the \f(CW\*(C`Net::DBus::Callback\*(C'\fR
class to invoke. The \f(CW$status\fR parameter determines
whether the hook is initially enabled, or disabled.
The return parameter is a unique id which should
be used to later remove, or disable the hook.
.IP "$reactor\->remove_hook($id)" 4
.IX Item "$reactor->remove_hook($id)"
Removes the previously registered hook identified
by \f(CW$id\fR.
.ie n .IP "$reactor\->toggle_hook($id[, $status])" 4
.el .IP "$reactor\->toggle_hook($id[, \f(CW$status\fR])" 4
.IX Item "$reactor->toggle_hook($id[, $status])"
Updates the status of the previously registered
hook identified by \f(CW$id\fR. The \f(CW$status\fR parameter
determines whether the hook is to be enabled or
disabled.
.IP "$reactor\->remove_read($fd);" 4
.IX Item "$reactor->remove_read($fd);"
.PD 0
.IP "$reactor\->remove_write($fd);" 4
.IX Item "$reactor->remove_write($fd);"
.IP "$reactor\->remove_exception($fd);" 4
.IX Item "$reactor->remove_exception($fd);"
.PD
Removes a watch on the file handle \f(CW$fd\fR.
.ie n .IP "$reactor\->toggle_read($fd, $status);" 4
.el .IP "$reactor\->toggle_read($fd, \f(CW$status\fR);" 4
.IX Item "$reactor->toggle_read($fd, $status);"
.PD 0
.ie n .IP "$reactor\->toggle_write($fd, $status);" 4
.el .IP "$reactor\->toggle_write($fd, \f(CW$status\fR);" 4
.IX Item "$reactor->toggle_write($fd, $status);"
.ie n .IP "$reactor\->toggle_exception($fd, $status);" 4
.el .IP "$reactor\->toggle_exception($fd, \f(CW$status\fR);" 4
.IX Item "$reactor->toggle_exception($fd, $status);"
.PD
Updates the status of a watch on the file handle \f(CW$fd\fR.
The \f(CW$status\fR parameter species whether the watch is
to be enabled or disabled.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus::Callback, Net::DBus::Connection, Net::DBus::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Berrange <dan@berrange.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004 by Daniel Berrange
