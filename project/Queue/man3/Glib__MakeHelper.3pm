.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MakeHelper 3pm"
.TH MakeHelper 3pm "2007-03-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Glib::MakeHelper \- Makefile.PL utilities for Glib\-based extensions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& eval "use Glib::MakeHelper; 1"
\&     or complain_that_glib_is_too_old_and_die();
.Ve
.PP
.Vb 1
\& %xspod_files = Glib::MakeHelper\->do_pod_files (@xs_files);
.Ve
.PP
.Vb 8
\& package MY;
\& sub postamble {
\&     return Glib::MakeHelper\->postamble_clean ()
\&          . Glib::MakeHelper\->postamble_docs (@main::xs_files)
\&          . Glib::MakeHelper\->postamble_rpms (
\&                 MYLIB     => $build_reqs{MyLib},
\&            );
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Makefile.PL for your typical Glib-based module is huge and hairy, thanks to
all the crazy hoops you have to jump through to get things right.  This module
wraps up some of the more intense and error-prone bits to reduce the amount of
copied code and potential for errors.
.SH "METHODS"
.IX Header "METHODS"
.IP "\s-1HASH\s0 = Glib::MakeHelper\->do_pod_files (@xs_files)" 4
.IX Item "HASH = Glib::MakeHelper->do_pod_files (@xs_files)"
Scan the \fI@xs_files\fR and return a hash describing the pod files that will
be created.  This is in the format wanted by \fIWriteMakefile()\fR. If \f(CW@ARGV\fR contains
the string \f(CW\*(C`disable\-apidoc\*(C'\fR an empty list will be returned and thus no apidoc
pod will be generated speeding up the build process.
.ie n .IP "\s-1LIST\s0 = Glib::MakeHelper\->select_files_by_version ($stem, $major\fR, \f(CW$minor)" 4
.el .IP "\s-1LIST\s0 = Glib::MakeHelper\->select_files_by_version ($stem, \f(CW$major\fR, \f(CW$minor\fR)" 4
.IX Item "LIST = Glib::MakeHelper->select_files_by_version ($stem, $major, $minor)"
Returns a list of all files that match \*(L"$stem\-\ed+\e.\ed+\*(R" and for which the first
number is bigger than \fI$major\fR and the second number is bigger than \fI$minor\fR.
If \fI$minor\fR is odd, it will be incremented by one so that the version number of
an upcoming stable release can be used during development as well.
.IP "\s-1LIST\s0 = Glib::MakeHelper\->read_source_list_file ($filename)" 4
.IX Item "LIST = Glib::MakeHelper->read_source_list_file ($filename)"
Reads \fI$filename\fR, removes all comments (starting with \*(L"#\*(R") and leading and
trailing whitespace, and returns a list of all lines that survived the treatment.
.IP "string = Glib::MakeHelper\->postamble_clean (@files)" 4
.IX Item "string = Glib::MakeHelper->postamble_clean (@files)"
Create and return the text of a realclean rule that cleans up after much 
of the autogeneration performed by Glib-based modules.  Everything in \f(CW@files\fR
will be deleted, too (it may be empty).
.Sp
The reasoning behind using this instead of just having you use the 'clean'
or 'realclean' keys is that this avoids you having to remember to put Glib's
stuff in your Makefile.PL's WriteMakefile arguments.
.IP "string = Glib::MakeHelper\->postamble_docs (@xs_files)" 4
.IX Item "string = Glib::MakeHelper->postamble_docs (@xs_files)"
\&\s-1NOTE:\s0 this is The Old Way.  see postamble_docs_full for The New Way.
.Sp
Create and return the text of Makefile rules to build documentation from
the \s-1XS\s0 files with Glib::ParseXSDoc and Glib::GenPod.
.Sp
Use this in your MY::postamble to enable autogeneration of \s-1POD\s0.
.Sp
This updates dependencies with the list of pod names generated by an earlier
run of \f(CW\*(C`do_pod_files\*(C'\fR.
.Sp
There is a special Makefile variable \s-1POD_DEPENDS\s0 that should be set to the
list of files that need to be created before the doc.pl step is run, include
files.
.Sp
There is also a variable \s-1BLIB_DONE\s0 which should be used as a dependency
anywhere a rule needs to be sure that a loadable and working module resides in
the blib directory before running.
.IP "string = Glib::MakeHelper\->postamble_docs_full (...)" 4
.IX Item "string = Glib::MakeHelper->postamble_docs_full (...)"
Create and return the text of Makefile rules to build documentation from
the \s-1XS\s0 files with Glib::ParseXSDoc and Glib::GenPod.
.Sp
Use this in your MY::postamble to enable autogeneration of \s-1POD\s0.
.Sp
This updates dependencies with the list of pod names generated by an earlier
run of \f(CW\*(C`do_pod_files\*(C'\fR.
.Sp
There is a special Makefile variable \s-1POD_DEPENDS\s0 that should be set to the
list of files that need to be created before the doc.pl step is run, include
files.
.Sp
There is also a variable \s-1BLIB_DONE\s0 which should be used as a dependancy
anywhere a rule needs to be sure that a loadable and working module resides in
the blib directory before running.
.Sp
The parameters are a list of key=>value pairs.  You must specify at minimum
either \s-1DEPENDS\s0 or \s-1XS_FILES\s0.
.RS 4
.IP "\s-1DEPENDS\s0 => ExtUtils::Depends object" 4
.IX Item "DEPENDS => ExtUtils::Depends object"
Most gtk2\-perl modules use ExtUtils::Depends to find headers, typemaps,
and other data from parent modules and to install this data for child
modules.  We can find from this object the list of \s-1XS\s0 files to scan for
documentation, doctype mappings for parent modules, and other goodies.
.IP "\s-1XS_FILES\s0 => \e@xs_file_names" 4
.IX Item "XS_FILES => @xs_file_names"
A list of xs files to scan for documentation.  Ignored if \s-1DEPENDS\s0 is
used.
.IP "\s-1DOCTYPES\s0 => \e@doctypes_file_names" 4
.IX Item "DOCTYPES => @doctypes_file_names"
List of filenames to pass to \f(CW\*(C`Glib::GenPod::add_types\*(C'\fR.  May be omitted.
.IP "\s-1COPYRIGHT\s0 => string" 4
.IX Item "COPYRIGHT => string"
\&\s-1POD\s0 text to be inserted in the '\s-1COPYRIGHT\s0' section of each generated page.
May be omitted.
.IP "\s-1COPYRIGHT_FROM\s0 => file name" 4
.IX Item "COPYRIGHT_FROM => file name"
The name of a file containing the \s-1POD\s0 to be inserted in the '\s-1COPYRIGHT\s0'
section of each generated page.  May be omitted.
.IP "\s-1NAME\s0 => extension name" 4
.IX Item "NAME => extension name"
The name of the extension, used to set \f(CW$Glib::GenPod::MAIN_MOD\fR (used in the
generated see-also listings).  May be omitted in favor of the name held
inside the ExtUtils::Depends object.  If \s-1DEPENDS\s0 is also specified, \s-1NAME\s0 wins.
.RE
.RS 4
.RE
.IP "string = Glib::MakeHelper\->postamble_rpms (\s-1HASH\s0)" 4
.IX Item "string = Glib::MakeHelper->postamble_rpms (HASH)"
Create and return the text of Makefile rules to manage building RPMs.
You'd put this in your Makefile.PL's MY::postamble.
.Sp
\&\fI\s-1HASH\s0\fR is a set of search and replace keys for the spec file.  All 
occurences of @\fIkey\fR@ in the spec file template perl\-$(\s-1DISTNAME\s0).spec.in
will be replaced with \fIvalue\fR.  '\s-1VERSION\s0' and '\s-1SOURCE\s0' are supplied for
you.  For example:
.Sp
.Vb 5
\& Glib::MakeHelper\->postamble_rpms (
\&        MYLIB     => 2.0.0, # we can work with anything from this up
\&        MYLIB_RUN => 2.3.1, # we are actually compiled against this one
\&        PERL_GLIB => 1.01,  # you must have this version of Glib
\& );
.Ve
.Sp
will replace \f(CW@MYLIB\fR@, \f(CW@MYLIB_RUN\fR@, and \f(CW@PERL_GLIB\fR@ in spec file.  See
the build setups for Glib and Gtk2 for examples.
.Sp
Note: This function just returns an empty string on Win32.
.SH "NOTICE"
.IX Header "NOTICE"
The MakeMaker distributed with perl 5.8.x generates makefiles with a bug that
causes object files to be created in the wrong directory.  There is an override
inserted by this module under the name MY::const_cccmd to fix this issue.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ross McFarland <rwmcfa1 at neces dot com>
.PP
hacked up and documented by muppet.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003\-2004 by the gtk2\-perl team
.PP
This library is free software; you can redistribute it and/or modify
it under the terms of the Lesser General Public License (\s-1LGPL\s0).  For 
more information, see http://www.fsf.org/licenses/lgpl.txt
