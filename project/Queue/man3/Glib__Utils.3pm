.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Glib::Utils 3pm"
.TH Glib::Utils 3pm "2007-03-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Glib::Utils \-  Miscellaneous utility functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Glib;
\&  Glib::set_application_name (Glib::get_real_name."'s Cool Program");
.Ve
.PP
.Vb 1
\&  print "app name is ".Glib::get_application_name()."\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Here are some useful miscellaneous utilities.
GLib is a portability library, providing portable utility functions for
C programs.  As such, most of these functions seem to violate the Glib
binding principle of not duplicating functionality that Perl already
provides, but there's a distinction for each one, i swear.  The functions
for dealing with user information are provided on all GLib-supported
platforms, not just where \s-1POSIX\s0 (which provides similar information) is
available, and even work on platforms where \f(CW%ENV\fR may not include the
expected information.  Also, the \*(L"application name\*(R" referred to by
(set|get)_application_name is a human readable name, distinct from the
actual program name provided by Perl's own \f(CW$0\fR.
.SH "METHODS"
.IX Header "METHODS"
.Sh "string = Glib::get_application_name"
.IX Subsection "string = Glib::get_application_name"
.RS 4
Get the human-readable application name set by \f(CW\*(C`set_application_name\*(C'\fR.
.RE
.Sh "Glib::set_application_name ($application_name)"
.IX Subsection "Glib::set_application_name ($application_name)"
.RS 4
.ie n .IP "* $application_name (string)" 4
.el .IP "* \f(CW$application_name\fR (string)" 4
.IX Item "$application_name (string)"
.RE
.RS 4
.Sp
Set the human-readable application name.
.RE
.Sh "string = Glib::get_home_dir"
.IX Subsection "string = Glib::get_home_dir"
.RS 4
Find the current user's home directory, by system\-dependent/appropriate
means.
.RE
.Sh "list = Glib::get_language_names"
.IX Subsection "list = Glib::get_language_names"
.RS 4
Computes a list of applicable locale names, which can be used to e.g. construct
locale-dependent filenames or search paths. The returned list is sorted from
most desirable to least desirable and always contains the default locale \*(L"C\*(R".
.RE
.Sh "string = Glib::get_real_name"
.IX Subsection "string = Glib::get_real_name"
.RS 4
Get the current user's real name.
.RE
.Sh "list = Glib::get_system_config_dirs"
.IX Subsection "list = Glib::get_system_config_dirs"
.RS 4
Returns an ordered list of base directories in which to access system-wide
configuration information.
.RE
.Sh "list = Glib::get_system_data_dirs"
.IX Subsection "list = Glib::get_system_data_dirs"
.RS 4
Returns an ordered list of base directories in which to access system-wide
application data.
.RE
.Sh "string = Glib::get_tmp_dir"
.IX Subsection "string = Glib::get_tmp_dir"
.RS 4
Get the temp dir as appropriate for the current system.  See the GLib docs
for info on how it works.
.RE
.Sh "string = Glib::get_user_cache_dir"
.IX Subsection "string = Glib::get_user_cache_dir"
.RS 4
Gets the base directory in which to store non\-essential, cached data specific
to particular user.
.RE
.Sh "string = Glib::get_user_config_dir"
.IX Subsection "string = Glib::get_user_config_dir"
.RS 4
Gets the base directory in which to store user-specific application
configuration information such as user preferences and settings.
.RE
.Sh "string = Glib::get_user_data_dir"
.IX Subsection "string = Glib::get_user_data_dir"
.RS 4
Get the base directory for application data such as icons that is customized
for a particular user.
.RE
.Sh "string = Glib::get_user_name"
.IX Subsection "string = Glib::get_user_name"
.RS 4
Get the current user's name by whatever system-dependent means necessary.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Glib
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2006 by the gtk2\-perl team.
.PP
This software is licensed under the \s-1LGPL\s0.  See Glib for a full notice.
