.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DBus::Binding::Server 3pm"
.TH Net::DBus::Binding::Server 3pm "2006-11-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::DBus::Binding::Server \- A server to accept incoming connections
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Creating a new server and accepting client connections
.PP
.Vb 1
\&  use Net::DBus::Binding::Server;
.Ve
.PP
.Vb 1
\&  my $server = Net::DBus::Binding::Server\->new(address => "unix:path=/path/to/socket");
.Ve
.PP
.Vb 1
\&  $server\->connection_callback(\e&new_connection);
.Ve
.PP
.Vb 2
\&  sub new_connection {
\&      my $connection = shift;
.Ve
.PP
.Vb 2
\&      .. work with new connection...
\&  }
.Ve
.PP
Managing the server and new connections in an event loop
.PP
.Vb 1
\&  my $reactor = Net::DBus::Binding::Reactor\->new();
.Ve
.PP
.Vb 2
\&  $reactor\->manage($server);
\&  $reactor\->run();
.Ve
.PP
.Vb 2
\&  sub new_connection {
\&      my $connection = shift;
.Ve
.PP
.Vb 2
\&      $reactor\->manage($connection);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A server for receiving connection from client programs.
The methods defined on this module have a close
correspondance to the dbus_server_XXX methods in the C \s-1API\s0,
so for further details on their behaviour, the C \s-1API\s0 documentation
may be of use.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $server = Net::DBus::Binding::Server\->new(address => ""unix:path=/path/to/socket"");" 4
.el .IP "my \f(CW$server\fR = Net::DBus::Binding::Server\->new(address => ``unix:path=/path/to/socket'');" 4
.IX Item "my $server = Net::DBus::Binding::Server->new(address => unix:path=/path/to/socket);"
Creates a new server binding it to the socket specified by the
\&\f(CW\*(C`address\*(C'\fR parameter.
.ie n .IP "$status = $server\fR\->\fIis_connected();" 4
.el .IP "$status = \f(CW$server\fR\->\fIis_connected()\fR;" 4
.IX Item "$status = $server->is_connected();"
Returns zero if the server has been disconnected,
otherwise a positive value is returned.
.IP "$server\->\fIdisconnect()\fR" 4
.IX Item "$server->disconnect()"
Closes this server to the remote host. This method
is called automatically during garbage collection (ie
in the \s-1DESTROY\s0 method) if the programmer forgets to
explicitly disconnect.
.IP "$server\->set_watch_callbacks(\e&add_watch, \e&remove_watch, \e&toggle_watch);" 4
.IX Item "$server->set_watch_callbacks(&add_watch, &remove_watch, &toggle_watch);"
Register a set of callbacks for adding, removing & updating 
watches in the application's event loop. Each parameter
should be a code reference, which on each invocation, will be
supplied with two parameters, the server object and the
watch object. If you are using a \f(CW\*(C`Net::DBus::Binding::Reactor\*(C'\fR object
as the application event loop, then the 'manage' method on
that object will call this on your behalf.
.IP "$server\->set_timeout_callbacks(\e&add_timeout, \e&remove_timeout, \e&toggle_timeout);" 4
.IX Item "$server->set_timeout_callbacks(&add_timeout, &remove_timeout, &toggle_timeout);"
Register a set of callbacks for adding, removing & updating 
timeouts in the application's event loop. Each parameter
should be a code reference, which on each invocation, will be
supplied with two parameters, the server object and the
timeout object. If you are using a \f(CW\*(C`Net::DBus::Binding::Reactor\*(C'\fR object
as the application event loop, then the 'manage' method on
that object will call this on your behalf.
.IP "$server\->set_connection_callback(\e&handler)" 4
.IX Item "$server->set_connection_callback(&handler)"
Registers the handler to use for dealing with
new incoming connections from clients. The code
reference will be invoked each time a new client
connects and supplied with a single parameter
which is the \f(CW\*(C`Net::DBus::Binding::Connection\*(C'\fR object representing
the client.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus::Binding::Connection, Net::DBus::Binding::Bus, Net::DBus::Binding::Message::Signal, Net::DBus::Binding::Message::MethodCall, Net::DBus::Binding::Message::MethodReturn, Net::DBus::Binding::Message::Error
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Berrange <dan@berrange.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004 by Daniel Berrange
