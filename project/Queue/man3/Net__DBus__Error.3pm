.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DBus::Error 3pm"
.TH Net::DBus::Error 3pm "2006-11-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::DBus::Error \- Error details for remote method invocation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package Music::Player::UnknownFormat;
.Ve
.PP
.Vb 1
\&  use base qw(Net::DBus::Error);
.Ve
.PP
.Vb 8
\&  # Define an error type for unknown track encoding type
\&  # for a music player service
\&  sub new {
\&      my $proto = shift;
\&      my $class = ref($proto) || $proto;
\&      my $self = $class\->SUPER::new(name => "org.example.music.UnknownFormat",
\&                                    message => "Unknown track encoding format");
\&  }
.Ve
.PP
.Vb 1
\&  package Music::Player::Engine;
.Ve
.PP
.Vb 1
\&  ...snip...
.Ve
.PP
.Vb 5
\&  # Play either mp3 or ogg music tracks, otherwise
\&  # thrown an error
\&  sub play {
\&      my $self = shift;
\&      my $url = shift;
.Ve
.PP
.Vb 6
\&      if ($url =~ /\e.(mp3|ogg)$/) {
\&          ...play the track
\&      } else {
\&         die Music::Player::UnknownFormat\->new();
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This objects provides for strongly typed error handling. Normally
a service would simply call
.PP
.Vb 1
\&  die "some message text"
.Ve
.PP
When returning the error condition to the calling DBus client, the
message is associated with a generic error code or \*(L"org.freedesktop.DBus.Failed\*(R".
While this suffices for many applications, occasionally it is desirable
to be able to catch and handle specific error conditions. For such
scenarios the service should create subclasses of the \f(CW\*(C`Net::DBus::Error\*(C'\fR
object providing in a custom error name. This error name is then sent back
to the client instead of the genreic \*(L"org.freedesktop.DBus.Failed\*(R" code.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $error\fR = Net::DBus::Error\->new(name => \f(CW$error_name\fR, message => \f(CW$description);" 4
.el .IP "my \f(CW$error\fR = Net::DBus::Error\->new(name => \f(CW$error_name\fR, message => \f(CW$description\fR);" 4
.IX Item "my $error = Net::DBus::Error->new(name => $error_name, message => $description);"
Creates a new error object whose name is given by the \f(CW\*(C`name\*(C'\fR
parameter, and long descriptive text is provided by the 
\&\f(CW\*(C`message\*(C'\fR parameter. The \f(CW\*(C`name\*(C'\fR parameter has certain
formatting rules which must be adhered to. It must only contain
the letters 'a'\-'Z', '0'\-'9', '\-', '_' and '.'. There must be
at least two components separated by a '.', For example a valid
name is 'org.example.Music.UnknownFormat'.
.IP "$error\->name" 4
.IX Item "$error->name"
Returns the DBus error name associated with the object.
.IP "$error\->message" 4
.IX Item "$error->message"
Returns the descriptive text/message associated with the
error condition.
.IP "$error\->stringify" 4
.IX Item "$error->stringify"
Formats the error as a string in a manner suitable for
printing out / logging / displaying to the user, etc.
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel P. Berrange
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005\-2006 Daniel P. Berrange
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus, Net::DBus::Object
